pico-8 cartridge // http://www.pico-8.com
version 41
__lua__
--variables
g = 1
p = {
	x=16,
	y=5,
	dx=0,
	dy=0,
	max_dx=0.5,
	w=8,
	h=8,
	sp=1,
	flp=false,
	spd=3,
	moving=false,
	climbing=false,
	upstairs=false,
	downstairs=false,
	down=false
}

e = {
	id=0,
	x=0,
	y=0,
	dx=0,
	dy=0,
	max_dx=0.5,
	w=8,
	h=8,
	sp=4,
	flp=false,
	spd=3,
	moving=false,
	dst=10,
}

enemies = {}

pos = {
	//{x=20, y=10,len=50,clr=4},
	//{x=50, y=40,len=70,clr=5},
	//{x=40, y=40,len=30,clr=4},
	//{x=70, y=40,len=5,clr=5},
}

debug_str = "debug"
-->8
--game core
function _init()
	create_enemies()
end

function _update()
	player_update()
	enemies_update()
	//check_stairs_()
end

function _draw()
	cls()
	map(0, 0, 0, 0, 128, 32)
	draw_enemies()
	draw_player()
	//check_stairs_()
	print(debug_str,0,100)
end
-->8
-- player movement
function player_update()
	p.dy+=g
	p.upstairs = check_upstairs()
	p.downstairs = check_downstairs()
	if btn(➡️) then
		p.moving=true
		p.dx += p.spd
		p.flp = false
	end
	if btn(⬅️) then
		p.moving=true
		p.dx -= p.spd
		p.flp = true
	end
	if btn(⬆️) and
	p.upstairs then
		p.dy -= p.spd
		p.dy=limit_speed(p.dy,p.max_dx)
		p.climbing = true
	end
	if btn(⬇️) and
	p.downstairs then
		p.down = true
		p.dy += p.spd
		p.dy=limit_speed(p.dy,p.max_dx)
		p.climbing = true
	end
	if p.dy > 0 then
		if (collide_map(p,"down",0)
		or collide_map(p,"down",2) and not p.down) then
			p.down = false
			p.dy=0
			p.climbing = false
			p.y-=((p.y+p.h+1)%8)-1
		end
	end
	if p.dx<0 then
 	p.dx=limit_speed(p.dx,p.max_dx)
 	if collide_map(p,"left",0) then
			p.dx=0
		end
 elseif p.dx>0 then
	 p.dx=limit_speed(p.dx,p.max_dx)
	 if collide_map(p,"right",0) then
			p.dx=0
		end
 end
 if p.moving
 	and not btn(⬅️)
 	and not btn(➡️) then
 	p.moving = false
 	p.dx=0
 end
 if p.climbing
 	and not btn(⬆️)
 	and not btn(⬇️) then
 	p.moving = false
 	p.dy=0
 end
	p.x+=p.dx
	p.y+=p.dy
	
	if p.climbing then
		p.sp = 3
		p.dy = 0
	else
		p.sp = 1
	end

	debug_str =
 //" upstairs: " ..
	//tostr(p.upstairs) ..
	" climbing: " ..
	tostr(p.climbing)
end

function draw_player()
	spr(p.sp,p.x,p.y,1,1,p.flp)
end

function collide_map(obj, aim, flag)
	local x=obj.x		local y=obj.y
	local w=obj.w		local h=obj.h
	local x1=0	local x2=0
	local y1=0 local y2=0
	
	if aim=="left" then
		x1=x  			y1=y
		x2=x  			y2=y+h-1
	elseif aim=="right" then
		x1=x+w-1	y1=y
		x2=x+w-1	y2=y+h-1
	elseif aim=="up" then
		x1=x+1			y1=y-1
		x2=x+w+1	y2=y
	elseif aim=="down" then
		x1=x					y1=y+h
		x2=x+w			y2=y+h
	end
	x1/=8		x2/=8
	y1/=8		y2/=8
	
	if fget(mget(x1,y1), flag)
	or fget(mget(x1,y2), flag)
	or fget(mget(x2,y1), flag)
	or fget(mget(x2,y2), flag) then
		return true
	else
		return false
	end
end

function check_upstairs()
	local tx = flr((p.x+4)/8)
	local ty = flr((p.y+4)/8) 
	if fget(mget(tx,ty), 2)
	or fget(mget(tx,ty), 3) then
		return true
	else
		return false
	end
end

function check_downstairs()
	local tx = flr((p.x+4)/8)
	local ty = flr((p.y+4)/8) 
	return fget(mget(tx,ty+1), 2)
end

function check_stairs_()
	local tx = flr((p.x+4)/8)
	local ty = flr((p.y+4)/8) 
	debug_str = fget(mget(tx,ty+1),2)
end

function limit_speed(num,maximum)
  return mid(-maximum,num,maximum)
end
-->8
-- enemy movement
function enemies_update()
	for i = 1, #enemies do
		local e = enemies[i]
		local dx = 0
		if e.dst >= e.len then
			e.toggle = not e.toggle
			e.dst = 0			
		end
		e.dst+= 1
		if e.toggle then
			dx = 0.5
			e.flp= false
		else
			dx = -0.5
			e.flp= true
		end
		e.dy = g
		e.dx = dx
		
		if collide_map(e,"down",0) then
			e.dy=0
			e.y-=((e.y+e.h+1)%8)-1
		end
		e.x+=e.dx
		e.y+=e.dy
	end
end

function create_enemies()
	for i = 1, #pos do
		local e = pos[i]
		local enemy = create_enemy(
			i,
			e.x,
			e.y,
			e.len,
			e.clr
			)
		add(enemies, enemy)
	end
end

function create_enemy(id,x,y,len,clr)
	return {
	 id=id,
		x=x,
		y=y,
		dx=0,
		dy=0,
		w=8,
		h=8,
		dst=0,
		flp=false,
		len=len,
		toggle=true,
		clr=clr
	}
end

function draw_enemies()
	for i = 1, #enemies do
		draw_enemy(enemies[i])		
	end
end

function draw_enemy(obj)
	spr(obj.clr,obj.x,obj.y,1,1,obj.flp)
end
__gfx__
000c000000050000000cc00000055000000000000000000000000000000000000c00000005000000000000000000000000000000000000000000000000000000
00ccc0000055500000cccc0000555500000000000000000000000cc000000550c0c0000050500000000000000000000000000000000000000000000000000000
00ccc000005550000cccccc0055555500ccc0202055502020000cccc000055550cc00c0005500500000000000000000000000000000000000000000000000000
0ccccc000555550000ffff0000ffff00ccdcc404556554041cc00ccc15500555ccc0ccc055505550000000000000000000000000000000000000000000000000
00fff30000fff30000ffff0000ffff00dccdc44465565444cc1ccccc5515555500cccccc00555555000000000000000000000000000000000000000000000000
00ffff0000ffff000fccccf00f5555f0cddcc44056655440cccccccc55555555000cccc000055550000000000000000000000000000000000000000000000000
0cccccf0055555f000cccc00005555000ccc442005554420000cccc000055550000c00c000050050000000000000000000000000000000000000000000000000
0cccc000055550000cccccc005555550222222202222222000c0c0c00050505000cc0cc000550550000000000000000000000000000000000000000000000000
66666666666666660777777067777776000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11116111111116110700007017116171000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11116111111116110777777017777771000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111116110700007007000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111116110777777007777770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000666666660700007007000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111116110777777007777770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111116110700007007000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0202020200000000000000000000000001010804000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000013000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000130012000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1310101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1200000000000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
